{"version":3,"file":"static/js/481.720029e6.chunk.js","mappings":"iNAGaA,EAAkBC,EAAAA,EAAAA,GAAH,8JAYfC,GAAaD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,sI,SCGvB,EAfkB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAACN,EAAD,CAAYO,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAtD,SACGG,EAAMK,SAFFL,EAAME,GADA,KAStB,C,2ICfYI,EAAkBb,EAAAA,EAAAA,MAAH,oOAiBfc,EAAed,EAAAA,EAAAA,OAAH,wOAgBZe,EAAmBf,EAAAA,EAAAA,KAAH,sE,SCb7B,EAhBmB,SAAC,GAAkB,IAAhBgB,EAAe,EAAfA,SACpB,OACE,UAACD,EAAD,CACEC,SAAU,SAAAC,GACRA,EAAIC,iBAEJF,EAASC,EAAIE,OAAOC,SAASC,MAAMd,OAEnCU,EAAIE,OAAOG,OACZ,EAPH,WASE,SAACT,EAAD,CAAiBU,KAAK,OAAOC,KAAK,WAClC,SAACV,EAAD,CAAcS,KAAK,SAAnB,sBAGL,ECaD,EA3Be,WAAO,IAAD,EACnB,GAAsCE,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMN,EAAK,UAAGK,EAAYE,IAAI,gBAAnB,QAA+B,GAE1C,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAO1B,EAAP,KAAe2B,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACHV,IAILW,EAAAA,EAAAA,IAAkBX,GAAOY,MAAK,SAAAC,GAAI,OAAIJ,EAAUI,EAAKC,QAAnB,GACnC,GAAE,CAACd,IAMJ,OACE,4BACE,SAAC,EAAD,CAAYL,SANK,SAAAT,GACnBoB,EAAe,CAAEN,MAAOd,GACzB,KAMG,SAAC6B,EAAA,EAAD,CAAWjC,OAAQA,MAGxB,C,+LC9BKkC,EAAM,mCAEZC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAgB,mCAAG,oGACPD,EAAAA,EAAAA,IAAA,mCAAsCD,IAD/B,cACxBG,EADwB,yBAGvBA,EAASN,MAHc,2CAAH,qDAMhBO,EAAa,mCAAG,WAAMC,GAAN,uFACJJ,EAAAA,EAAAA,IAAA,gBACZI,EADY,2CAC6BL,IAFzB,cACrBG,EADqB,yBAKpBA,EAASN,MALW,2CAAH,sDAQbS,EAAoB,mCAAG,WAAMD,GAAN,uFACXJ,EAAAA,EAAAA,IAAA,gBACZI,EADY,mCACqBL,IAFV,cAC5BG,EAD4B,yBAK3BA,EAASN,MALkB,2CAAH,sDAQpBF,EAAiB,mCAAG,WAAMX,GAAN,uFACRiB,EAAAA,EAAAA,IAAA,8CACkBD,EADlB,kBAC+BhB,IAFvB,cACzBmB,EADyB,yBAKxBA,EAASN,MALe,2CAAH,sDAQjBU,EAAY,mCAAG,WAAMF,GAAN,uFACHJ,EAAAA,EAAAA,IAAA,gBACZI,EADY,2CAC6BL,IAF1B,cACpBG,EADoB,yBAKnBA,EAASN,MALU,2CAAH,qD","sources":["components/styledCss/MovieList.styled.jsx","components/MovieList.jsx","components/styledCss/SearchForm.styled.jsx","components/SearchForm.jsx","pages/Movies.jsx","services/allFetchs.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieListStyled = styled.ul`\n  margin: 0;\n  padding: 0;\n\n  margin-left: 30px;\n  list-style: none;\n\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n\n  font-size: 20px;\n\n  color: #000000;\n\n  &:hover {\n    color: #b564e7;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { MovieListStyled, LinkStyled } from './styledCss/MovieList.styled';\n\nconst MovieList = ({ values }) => {\n  const location = useLocation();\n\n  return (\n    <MovieListStyled>\n      {values.map(value => (\n        <li key={value.id}>\n          <LinkStyled to={`/movies/${value.id}`} state={{ from: location }}>\n            {value.title}\n          </LinkStyled>\n        </li>\n      ))}\n    </MovieListStyled>\n  );\n};\nexport default MovieList;\n","import styled from '@emotion/styled';\n\nexport const InputSearchForm = styled.input`\n  border-radius: 6px;\n  border-color: #b564e7;\n  outline: none;\n\n  padding: 10px 15px;\n  width: 350px;\n\n  font-size: 20px;\n\n  margin-right: 20px;\n\n  &:focus {\n    border-color: #92ce9e;\n  }\n`;\n\nexport const ButtonSearch = styled.button`\n  font-size: 20px;\n\n  border-radius: 6px;\n  border-color: #b564e7;\n\n  background-color: #d4b2e9;\n\n  &:hover {\n    background-color: #92ce9e;\n    border-color: #92ce9e;\n  }\n\n  padding: 10px 20px;\n`;\n\nexport const SearchFormStyled = styled.form`\n  display: flex;\n  justify-content: center;\n`;\n","import {\n  InputSearchForm,\n  ButtonSearch,\n  SearchFormStyled,\n} from './styledCss/SearchForm.styled';\n\nconst SearchForm = ({ onSubmit }) => {\n  return (\n    <SearchFormStyled\n      onSubmit={evt => {\n        evt.preventDefault();\n\n        onSubmit(evt.target.elements.query.value);\n\n        evt.target.reset();\n      }}\n    >\n      <InputSearchForm type=\"text\" name=\"query\" />\n      <ButtonSearch type=\"submit\">Search</ButtonSearch>\n    </SearchFormStyled>\n  );\n};\nexport default SearchForm;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchFilmsOrQuery } from '../services/allFetchs';\n\nimport MovieList from '../components/MovieList';\nimport SearchForm from '../components/SearchForm';\n\nconst Movies = () => {\n  const [serchParams, setSerchParams] = useSearchParams();\n  const query = serchParams.get('query') ?? '';\n\n  const [values, setValues] = useState([]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    fetchFilmsOrQuery(query).then(data => setValues(data.results));\n  }, [query]);\n\n  const handleSubmit = value => {\n    setSerchParams({ query: value });\n  };\n\n  return (\n    <div>\n      <SearchForm onSubmit={handleSubmit} />\n\n      <MovieList values={values} />\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API = '5a45960aa9b19faa72924039862aa15f';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchAllTrenders = async () => {\n  const response = await axios.get(`trending/all/day?api_key=${API}`);\n\n  return response.data;\n};\n\nexport const fetchCastFilm = async filmId => {\n  const response = await axios.get(\n    `movie/${filmId}/credits?language=en-US&api_key=${API}`\n  );\n\n  return response.data;\n};\n\nexport const fetchDetailsInfoFilm = async filmId => {\n  const response = await axios.get(\n    `movie/${filmId}?language=en-US&api_key=${API}`\n  );\n\n  return response.data;\n};\n\nexport const fetchFilmsOrQuery = async query => {\n  const response = await axios.get(\n    `search/movie?language=en-US&api_key=${API}&query=${query}`\n  );\n\n  return response.data;\n};\n\nexport const fetchReviews = async filmId => {\n  const response = await axios.get(\n    `movie/${filmId}/reviews?language=en-US&api_key=${API}`\n  );\n\n  return response.data;\n};\n"],"names":["MovieListStyled","styled","LinkStyled","Link","values","location","useLocation","map","value","to","id","state","from","title","InputSearchForm","ButtonSearch","SearchFormStyled","onSubmit","evt","preventDefault","target","elements","query","reset","type","name","useSearchParams","serchParams","setSerchParams","get","useState","setValues","useEffect","fetchFilmsOrQuery","then","data","results","MovieList","API","axios","fetchAllTrenders","response","fetchCastFilm","filmId","fetchDetailsInfoFilm","fetchReviews"],"sourceRoot":""}